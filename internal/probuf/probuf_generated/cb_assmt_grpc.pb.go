// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: cb_assmt.proto

package probuf_generated

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RailwayService_BuyTicket_FullMethodName          = "/railwayTicketing.RailwayService/BuyTicket"
	RailwayService_ViewReceipt_FullMethodName        = "/railwayTicketing.RailwayService/ViewReceipt"
	RailwayService_ViewAllocatedSeats_FullMethodName = "/railwayTicketing.RailwayService/ViewAllocatedSeats"
	RailwayService_CancelTicket_FullMethodName       = "/railwayTicketing.RailwayService/CancelTicket"
	RailwayService_ModifySeat_FullMethodName         = "/railwayTicketing.RailwayService/ModifySeat"
)

// RailwayServiceClient is the client API for RailwayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RailwayServiceClient interface {
	BuyTicket(ctx context.Context, in *TicketCreateRequest, opts ...grpc.CallOption) (*Receipt, error)
	ViewReceipt(ctx context.Context, in *TicketRequest, opts ...grpc.CallOption) (*Receipt, error)
	ViewAllocatedSeats(ctx context.Context, in *TrainSectionAllocated, opts ...grpc.CallOption) (*Section, error)
	CancelTicket(ctx context.Context, in *TicketRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ModifySeat(ctx context.Context, in *SeatModificationRequest, opts ...grpc.CallOption) (*Receipt, error)
}

type railwayServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRailwayServiceClient(cc grpc.ClientConnInterface) RailwayServiceClient {
	return &railwayServiceClient{cc}
}

func (c *railwayServiceClient) BuyTicket(ctx context.Context, in *TicketCreateRequest, opts ...grpc.CallOption) (*Receipt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Receipt)
	err := c.cc.Invoke(ctx, RailwayService_BuyTicket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *railwayServiceClient) ViewReceipt(ctx context.Context, in *TicketRequest, opts ...grpc.CallOption) (*Receipt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Receipt)
	err := c.cc.Invoke(ctx, RailwayService_ViewReceipt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *railwayServiceClient) ViewAllocatedSeats(ctx context.Context, in *TrainSectionAllocated, opts ...grpc.CallOption) (*Section, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Section)
	err := c.cc.Invoke(ctx, RailwayService_ViewAllocatedSeats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *railwayServiceClient) CancelTicket(ctx context.Context, in *TicketRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RailwayService_CancelTicket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *railwayServiceClient) ModifySeat(ctx context.Context, in *SeatModificationRequest, opts ...grpc.CallOption) (*Receipt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Receipt)
	err := c.cc.Invoke(ctx, RailwayService_ModifySeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RailwayServiceServer is the server API for RailwayService service.
// All implementations must embed UnimplementedRailwayServiceServer
// for forward compatibility.
type RailwayServiceServer interface {
	BuyTicket(context.Context, *TicketCreateRequest) (*Receipt, error)
	ViewReceipt(context.Context, *TicketRequest) (*Receipt, error)
	ViewAllocatedSeats(context.Context, *TrainSectionAllocated) (*Section, error)
	CancelTicket(context.Context, *TicketRequest) (*emptypb.Empty, error)
	ModifySeat(context.Context, *SeatModificationRequest) (*Receipt, error)
	mustEmbedUnimplementedRailwayServiceServer()
}

// UnimplementedRailwayServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRailwayServiceServer struct{}

func (UnimplementedRailwayServiceServer) BuyTicket(context.Context, *TicketCreateRequest) (*Receipt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyTicket not implemented")
}
func (UnimplementedRailwayServiceServer) ViewReceipt(context.Context, *TicketRequest) (*Receipt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewReceipt not implemented")
}
func (UnimplementedRailwayServiceServer) ViewAllocatedSeats(context.Context, *TrainSectionAllocated) (*Section, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewAllocatedSeats not implemented")
}
func (UnimplementedRailwayServiceServer) CancelTicket(context.Context, *TicketRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelTicket not implemented")
}
func (UnimplementedRailwayServiceServer) ModifySeat(context.Context, *SeatModificationRequest) (*Receipt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifySeat not implemented")
}
func (UnimplementedRailwayServiceServer) mustEmbedUnimplementedRailwayServiceServer() {}
func (UnimplementedRailwayServiceServer) testEmbeddedByValue()                        {}

// UnsafeRailwayServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RailwayServiceServer will
// result in compilation errors.
type UnsafeRailwayServiceServer interface {
	mustEmbedUnimplementedRailwayServiceServer()
}

func RegisterRailwayServiceServer(s grpc.ServiceRegistrar, srv RailwayServiceServer) {
	// If the following call pancis, it indicates UnimplementedRailwayServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RailwayService_ServiceDesc, srv)
}

func _RailwayService_BuyTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TicketCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RailwayServiceServer).BuyTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RailwayService_BuyTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RailwayServiceServer).BuyTicket(ctx, req.(*TicketCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RailwayService_ViewReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RailwayServiceServer).ViewReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RailwayService_ViewReceipt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RailwayServiceServer).ViewReceipt(ctx, req.(*TicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RailwayService_ViewAllocatedSeats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrainSectionAllocated)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RailwayServiceServer).ViewAllocatedSeats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RailwayService_ViewAllocatedSeats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RailwayServiceServer).ViewAllocatedSeats(ctx, req.(*TrainSectionAllocated))
	}
	return interceptor(ctx, in, info, handler)
}

func _RailwayService_CancelTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RailwayServiceServer).CancelTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RailwayService_CancelTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RailwayServiceServer).CancelTicket(ctx, req.(*TicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RailwayService_ModifySeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeatModificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RailwayServiceServer).ModifySeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RailwayService_ModifySeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RailwayServiceServer).ModifySeat(ctx, req.(*SeatModificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RailwayService_ServiceDesc is the grpc.ServiceDesc for RailwayService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RailwayService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "railwayTicketing.RailwayService",
	HandlerType: (*RailwayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BuyTicket",
			Handler:    _RailwayService_BuyTicket_Handler,
		},
		{
			MethodName: "ViewReceipt",
			Handler:    _RailwayService_ViewReceipt_Handler,
		},
		{
			MethodName: "ViewAllocatedSeats",
			Handler:    _RailwayService_ViewAllocatedSeats_Handler,
		},
		{
			MethodName: "CancelTicket",
			Handler:    _RailwayService_CancelTicket_Handler,
		},
		{
			MethodName: "ModifySeat",
			Handler:    _RailwayService_ModifySeat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cb_assmt.proto",
}
